// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.DDR.subsystems;

import org.usfirst.frc3620.DDR.Robot;
import org.usfirst.frc3620.DDR.RobotMap;
import org.usfirst.frc3620.DDR.commands.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Subsystem1 extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController speedController1 = RobotMap.subsystem1SpeedController1;
    private final SpeedController speedController2 = RobotMap.subsystem1SpeedController2;
    private final RobotDrive robotDrive21 = RobotMap.subsystem1RobotDrive21;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public enum Safety{ACTIVE, INACTIVE};
Safety currentSafety = Safety.ACTIVE;

public enum Mode{TANK, ARCADE};
Mode currentMode = Mode.ARCADE;

double currentPower = 0;

public Safety getcurrentSafety() {
	return currentSafety;
}
public Mode getcurrentMode() {
	return currentMode;
}

public void toggleMode() {
	if (currentMode == Mode.ARCADE) {
		currentMode = Mode.TANK;
	}
	else {
		currentMode = Mode.ARCADE;
	}
	System.out.println("set mode to " + currentMode);
}

public double getcurrentPower() {
	return currentPower;
}

public void powerUp() {

	bumpcurrentPower(0.1);
}

public void powerDown() {
		bumpcurrentPower(-0.1);
}

public void pressurize() {
		//Will pressurize tank
	System.out.println("Work in progress");
}

public void fireCannon() {
	if (currentSafety == Subsystem1.Safety.INACTIVE) {
		//Will Fire cannon
		System.out.println("Work in progress");
	}
	else if (currentSafety == Subsystem1.Safety.ACTIVE) {
		System.out.println("The Lid is down, release safety to fire");
	}
}

public void toggleSafety() {
	if (currentSafety == Safety.ACTIVE) {
		currentSafety = Safety.INACTIVE;
	}
	else {
		currentSafety = Safety.ACTIVE;
	}
}

public void bumpcurrentPower(double bump) {
	currentPower = currentPower+bump;
	System.out.println("Power bumped to" + currentPower);
}
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Command1());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}


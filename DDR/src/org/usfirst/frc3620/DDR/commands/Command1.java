// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.DDR.commands;

import edu.wpi.first.wpilibj.command.Command;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import org.usfirst.frc3620.DDR.Robot;
import org.usfirst.frc3620.DDR.RobotMap;
import org.usfirst.frc3620.DDR.subsystems.Subsystem1;
import org.usfirst.frc3620.DDR.subsystems.Subsystem1.Mode;

/**
 *
 */
public class Command1 extends Command {
	boolean tankDriveOn = false;


	// And From your main() method or any other method




    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Command1() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.subsystem1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {

    	Timer timer = new Timer();

    	class printTime extends TimerTask {
    	    public void run() {
    	    	double power = Robot.subsystem1.getcurrentPower();
    	    	System.out.println("Power is " + power); 
    	    }
    	}
    	timer.schedule(new printTime(), 0, 15000);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    /* Front left is 3, Back Left is 1, Back right is 4, Front right is 2, up is 13,
     * down is 15, left is 16, right is 14 (non-Javadoc)
     * @see edu.wpi.first.wpilibj.command.Command#execute()
     */
    
	

    
    protected void execute() {

    	double leftPower = 0;
    	double rightPower = 0;
    	double power = Robot.subsystem1.getcurrentPower();
    	
    	Subsystem1.Mode currentMode = Robot.subsystem1.getcurrentMode();
    		



if (currentMode == Subsystem1.Mode.TANK) {
	//X
 if (Robot.oi.joystick1.getRawButton(7)) {
	 leftPower = power;
 }
 else if (Robot.oi.joystick1.getRawButton(6)) {
	 //Triangle
	 leftPower = -1*power;
 }
 if (Robot.oi.joystick1.getRawButton(5)) {
	 //Square
	 rightPower = -1*power;
 }
 else if (Robot.oi.joystick1.getRawButton(8)) {
	 //Circle
	 rightPower = power;
 }
}
 
if (currentMode == Mode.ARCADE) {
 if (Robot.oi.joystick1.getRawButton(2)) {
	 //Down
	 leftPower = -1*power; 
	 rightPower = -1*power;
 }
 else if (Robot.oi.joystick1.getRawButton(3)) {
	 //Up
	 leftPower = power;
	 rightPower = power;
 }
 if (Robot.oi.joystick1.getRawButton(4)) {
	 //Right
	 leftPower = power;
	 rightPower = -1*power;
 }
 else if (Robot.oi.joystick1.getRawButton(1)) {
	 //Left
	 leftPower = -1*power;
	 rightPower = power;
 }
    }


 RobotMap.subsystem1RobotDrive21.tankDrive(leftPower, rightPower);
    	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

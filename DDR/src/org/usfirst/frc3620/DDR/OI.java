// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.DDR;

import org.usfirst.frc3620.DDR.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    //Up arrow
    public JoystickButton powerUpButton;
    //X
    public JoystickButton powerUpButton2;
    //Down arrow
    public JoystickButton powerDownButton;
    //Triangle
    public JoystickButton powerDownButton2;
    //Right arrow
    public JoystickButton fireCannon;
    //O
    public JoystickButton fireCannon2;
    //Left arrow
    public JoystickButton cannonPressurize;
    //Square
    public JoystickButton cannonPressurize2;
    //Select
    public JoystickButton driveSwitchButton;
    //Start
    public JoystickButton cannonSafety;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        //Up arrow
        powerUpButton = new JoystickButton(joystick1, 3);
        powerUpButton.whenPressed(new PowerUpCommand());
        
        //X:
        powerUpButton2 = new JoystickButton(joystick1, 7);
        powerUpButton2.whenPressed(new PowerUpCommand2());
        
        //Down arrow:
        powerDownButton = new JoystickButton(joystick1, 2);
        powerDownButton.whenPressed(new PowerDownCommand());
        
        //Triangle
        powerDownButton2 = new JoystickButton(joystick1, 6);
        powerDownButton2.whenPressed(new PowerDownCommand2());
        
        //Right arrow:
        fireCannon = new JoystickButton(joystick1, 4);
        fireCannon.whenPressed(new FireCommand());
        
        //O
        fireCannon2 = new JoystickButton(joystick1, 8);
        fireCannon2.whenPressed(new FireCommand2());
        
        //Left arrow
        cannonPressurize = new JoystickButton(joystick1, 1);
        cannonPressurize.whenPressed(new PressureCommand());
        
        //Square
        cannonPressurize2 = new JoystickButton(joystick1, 5);
        cannonPressurize2.whenPressed(new PressureCommand2());
        
        //Select
        driveSwitchButton = new JoystickButton(joystick1, 9);
        driveSwitchButton.whenPressed(new ModeSwitchCommand());
        
        //Start
        cannonSafety = new JoystickButton(joystick1, 10);
        cannonSafety.whenPressed(new SafetyCommand());

        
        
        
        
        
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Command 1", new Command1());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

